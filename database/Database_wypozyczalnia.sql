-- This script was generated by the ERD tool in pgAdmin 4.
-- Please log an issue at https://github.com/pgadmin-org/pgadmin4/issues/new/choose if you find any bugs, including reproduction steps.
BEGIN;


CREATE TABLE IF NOT EXISTS public.adresy
(
    adres_id integer NOT NULL,
    miejscowosc character varying(20) COLLATE pg_catalog."default",
    ulica character varying(20) COLLATE pg_catalog."default",
    numer_domu character varying(20) COLLATE pg_catalog."default",
    kod_pocztowy integer,
    CONSTRAINT adresy_pkey PRIMARY KEY (adres_id)
);

CREATE TABLE IF NOT EXISTS public.klienci
(
    id_rejestracji integer NOT NULL,
    id_klienta serial NOT NULL,
    imie character varying(50) COLLATE pg_catalog."default" NOT NULL,
    nazwisko character varying(50) COLLATE pg_catalog."default" NOT NULL,
    numer_telefonu character(12) COLLATE pg_catalog."default" NOT NULL,
    email character varying(100) COLLATE pg_catalog."default" NOT NULL,
    prawo_jazdy character varying(20) COLLATE pg_catalog."default" NOT NULL,
    data_urodzenia date NOT NULL,
    adres_id integer,
    CONSTRAINT klienci_pkey PRIMARY KEY (id_klienta),
    CONSTRAINT unikalny_id_rejestracji UNIQUE (id_rejestracji)
);

CREATE TABLE IF NOT EXISTS public.koszt
(
    koszt_id integer NOT NULL,
    koszt_rodzaj_samochodu character varying(128) COLLATE pg_catalog."default",
    koszt_dzien numeric(15, 2),
    koszt_kilometr numeric(15, 2),
    CONSTRAINT koszt_pkey PRIMARY KEY (koszt_id)
);

CREATE TABLE IF NOT EXISTS public.platnosc
(
    platnosc_id serial NOT NULL,
    id_potwierdzenia integer NOT NULL,
    metoda_platnosci character varying(20) COLLATE pg_catalog."default" NOT NULL,
    kwota numeric(10, 2) NOT NULL,
    CONSTRAINT platnosc_pkey PRIMARY KEY (platnosc_id)
);

CREATE TABLE IF NOT EXISTS public.pracownicy
(
    id_rejestracji integer NOT NULL,
    id_pracownika integer NOT NULL,
    imie character varying(20) COLLATE pg_catalog."default" NOT NULL,
    nazwisko character varying(20) COLLATE pg_catalog."default" NOT NULL,
    numer_telefonu character(12) COLLATE pg_catalog."default" NOT NULL,
    email character varying(30) COLLATE pg_catalog."default" NOT NULL,
    prawo_jazdy character varying(20) COLLATE pg_catalog."default" NOT NULL,
    data_urodzenia date NOT NULL,
    adres_id integer,
    CONSTRAINT pracownicy_pkey PRIMARY KEY (id_pracownika),
    CONSTRAINT unikalny1_id_rejestracji UNIQUE (id_rejestracji)
);

CREATE TABLE IF NOT EXISTS public.rejestracja
(
    id_rejestracji integer NOT NULL,
    login character varying(20) COLLATE pg_catalog."default" NOT NULL,
    haslo character varying(20) COLLATE pg_catalog."default" NOT NULL,
    CONSTRAINT rejestracja_pkey PRIMARY KEY (id_rejestracji)
);

CREATE TABLE IF NOT EXISTS public.samochody
(
    samochod_id integer NOT NULL,
    koszt_id integer NOT NULL,
    marka character varying(50) COLLATE pg_catalog."default" NOT NULL,
    model character varying(50) COLLATE pg_catalog."default" NOT NULL,
    typ_samochodu character varying(20) COLLATE pg_catalog."default" NOT NULL,
    ilosc_miejsc smallint NOT NULL,
    dostepnosc boolean NOT NULL,
    CONSTRAINT samochody_pkey PRIMARY KEY (samochod_id)
);

COMMENT ON COLUMN public.samochody.dostepnosc
    IS 'Indicates if the car is available for rental';

CREATE TABLE IF NOT EXISTS public.wypozyczenia
(
    wypozyczenie_id integer NOT NULL,
    id_klienta integer,
    platnosc_id integer,
    samochod_id integer,
    start_wypozyczenia date,
    koniec_wypozyczenia date,
    przebieg_start integer,
    przebieg_koniec integer,
    id_pracownika integer,
    CONSTRAINT wypozyczenia_pkey PRIMARY KEY (wypozyczenie_id)
);

ALTER TABLE IF EXISTS public.klienci
    ADD CONSTRAINT fk_klienci_adresy FOREIGN KEY (adres_id)
    REFERENCES public.adresy (adres_id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS public.klienci
    ADD CONSTRAINT fk_klienci_rejestracja FOREIGN KEY (id_rejestracji)
    REFERENCES public.rejestracja (id_rejestracji) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;
CREATE INDEX IF NOT EXISTS unikalny_id_rejestracji
    ON public.klienci(id_rejestracji);


ALTER TABLE IF EXISTS public.pracownicy
    ADD CONSTRAINT fk_pracownicy_adresy FOREIGN KEY (adres_id)
    REFERENCES public.adresy (adres_id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS public.pracownicy
    ADD CONSTRAINT fk_pracownicy_rejestracja FOREIGN KEY (id_rejestracji)
    REFERENCES public.rejestracja (id_rejestracji) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;
CREATE INDEX IF NOT EXISTS unikalny1_id_rejestracji
    ON public.pracownicy(id_rejestracji);


ALTER TABLE IF EXISTS public.samochody
    ADD CONSTRAINT fk_samochody_koszt FOREIGN KEY (koszt_id)
    REFERENCES public.koszt (koszt_id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS public.wypozyczenia
    ADD CONSTRAINT fk_wypozyczenia_klienci FOREIGN KEY (id_klienta)
    REFERENCES public.klienci (id_klienta) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS public.wypozyczenia
    ADD CONSTRAINT fk_wypozyczenia_platnosc FOREIGN KEY (platnosc_id)
    REFERENCES public.platnosc (platnosc_id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS public.wypozyczenia
    ADD CONSTRAINT fk_wypozyczenia_pracownicy FOREIGN KEY (id_pracownika)
    REFERENCES public.pracownicy (id_pracownika) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS public.wypozyczenia
    ADD CONSTRAINT fk_wypozyczenia_samochody FOREIGN KEY (samochod_id)
    REFERENCES public.samochody (samochod_id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;

END;